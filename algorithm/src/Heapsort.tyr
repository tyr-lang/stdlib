with container.FlatArray;
with container.index_t;

/**
 * Sort an ArrayView in place
 */
public type Heapsort {
  type def sort(data : FlatArray[int], size : index_t) : void {
    var n = size.unpack
    var value : int;
    var parent : container.size_t;
    var child : container.size_t;

    var root = n >> 1U;
    var count = 0;

    while (true) {
      if (0U != root) {
        parent = --root
        value = data(root)

      } else if ( 0U != --n ) {
        value = data(n)
        data(n) = data(0)
        parent = 0U

      } else
        return;

      while ((child = (parent + 1U) << 1U) < n) {
        if (data(child - 1U) > data(child))
          --child;

        data(parent) = data(child)
        parent = child
      }

      if (child == n) {
        if (data(--child) >= value) {
          data(parent) = data(child)
          data(child) = value
          continue
        }

        child = parent

      } else {
        if (data(parent) >= value) {
          data(parent) = value
          continue
        }

        child = (parent - 1U) >> 1U
      }

      while (child != root) {
        parent = (child - 1U) >> 1U

        if (data(parent) >= value)
          break;

        data(child) = data(parent)
        child = parent
      }

      data(child) = value
    }
  }

  test "sort3" {
    var arr = new FlatArray[int](4)

    arr(0) = 7
    arr(1) = 1
    arr(2) = -4
    arr(3) = 5

    sort(arr, 3)

    var r = arr(0) == -4 && arr(1) == 1 && arr(2) == 7 && arr(3) == 5

    delete arr

    r
  }

  test "sort" {
    var arr = new FlatArray[int](4)

    arr(0) = 7
    arr(1) = 1
    arr(2) = -4
    arr(3) = 5

    sort(arr, 4)

    var r = arr(0) == -4 && arr(1) == 1 && arr(2) == 5 && arr(3) == 7

    delete arr

    r
  }
}
