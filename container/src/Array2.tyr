with tyr.lang.container.size_t
with tyr.lang.container.index_t
with tyr.lang.container.Seq
with tyr.lang.container.Iterator
with tyr.lang.container.FlatArray
with tyr.lang.container.FlatArrayIterator
with tyr.lang.container.ArrayView

/**
 * An array of arrays that knows its size and type.
 *
 * @author Timm Felden
 */
public class Array2[T : Type[any]] <: Seq[T] {
  public val lengthX : size_t;
  public val lengthY : size_t;
  private var data : FlatArray[T];

  public new (sizeX : index_t, sizeY : index_t = sizeX) {
    lengthX = sizeX.unpack
    lengthY = sizeY.unpack

    data = new FlatArray[T](lengthX*lengthY)
  }

  public new (sizeX : index_t, sizeY : index_t, init : Block[T]) {
    lengthX = sizeX.unpack
    lengthY = sizeY.unpack

    val end = lengthX*lengthY
    data = new FlatArray[T](end)

    var i = 0U
    while(i < end) {
      data(i) = init.eval()
      ++i
    }
  }

  delete {
    delete data;
  }

  public def iterator : FlatArrayIterator[T] = new FlatArrayIterator[T](data, lengthX*lengthY)

  public def apply(x : index_t, y : index_t) : T = data(x.unpack * lengthY + y.unpack);
  public def update(x : index_t, y : index_t, v : T) : T = data.update(x.unpack * lengthY + y.unpack, v);

  public def isDefined(x : index_t, y : index_t) : bool
    = 0U <= x.unpack && x.unpack < lengthX &&
      0U <= y.unpack && y.unpack < lengthY

  /** @note this is the total number of elements */
  public def size : size_t = lengthX*lengthY

  public def view (offset : index_t = 0.implicit())
                  = ArrayView[T].from(data.shift(offset))

  // /**
  //  * Perform action for each remaining element of the array. Allow the block to
  //  * change the elements.
  //  */
  // public def foreach (x : BlockParameter[Ref[T]], action : Block[any]) : void {
  //   var i = 0U
  //   while(i < length*length) {
  //     x = data(i)
  //     ++i
  //     action.eval()
  //   }
  // }
}