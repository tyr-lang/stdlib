/**
 * The type of a type.
 *
 * @todo should be a class
 *
 * @todo should be generic (and covariant?) in T
 *
 * @note this type is currently used only for typing and has no RT semantics
 */
var type Type <: any, native {

  //def isa := ?:
  //def cast := !:

  // @note specifying v in the presence of implicit casts is beneficial
  //def reinterpret[V : Type](v : V) : T <: native


  /**
   * dynamic type checking
   *
   * @todo should be v : Some[S, S >: T]
   */
  def ?: (v : any) : bool
         <: native, operator.precedence[90];

  /**
   * dynamic type casting
   *
   * @todo should be v : Some[S, S >: T]
   */
  //def !: (v : any) : T
  //       <: native, operator.precedence[90];
}
