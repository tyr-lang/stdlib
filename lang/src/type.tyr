/**
 * The type of a type.
 *
 * @note  this type is currently used only for typing and has no RT semantics
 *
 * @note  Type, like IntegerLiteral, require special treatment by the compiler
 *   as overload resolution uses implicit Type[_] shapes to type parameter types
 *
 * @note  the signature of this type cannot be changed without changing the
 *   compiler
 *
 * @note  Type acts as if it had a proxy[T] property, but it cannot have one as
 *   this would introduce an unsolvable elaboration cycle as of Tyr 0.7
 *
 * @todo 0.8 should be sealed
 */
public class Type[+T : Type[any] := any] <: Object, mem.eternal {

  /**
   * Type initialization is performed by the back-end globally.
   * The initialization of Type values happens even before evaluation of global
   * initialization.
   */
  private new <: reflection.native;

  /**
   * Equality on types is a subrelation of equality on pointers, because
   * identical types can exist at most once. Further, it can be decided at
   * compile time for compile-time types.
   *
   * @todo add with CT in 0.9
   */
  // type def == (this : Type, that : Type) : bool
  //            <: reflection.native, reflection.CT, operator.precedence[80];

  /* create an unevaluated intersection type */
  public type def & (this : Type[_], x : Type[_]) : Type[_]
                    <: reflection.native, reflection.CT, inline,
                       operator.precedence[97];
  /* create an unevaluated union type */
  public type def | (this : Type[_], x : Type[_]) : Type[_]
                    <: reflection.native, reflection.CT, inline,
                       operator.precedence[93];


  /**
   * static unchecked type casting
   *
   * @note while currently basically any cast is accepted, future versions of
   *       Tyr may restrict this feature to types with similar representation
   */
  public type def !! (this : Type[_], v : any) : this
                     <: reflection.native, operator.precedence[90];
}