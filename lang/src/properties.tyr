/**
 * Make the target type abstract, i.e. no instances of it can be constructed.
 *
 * @note This is done on a best-effort level. It is not possible to prevent
 *       anybody from allocating memory and forcing it into a state that behaves
 *       like an instance of an abstract type.
 */
public property abstract <: reflection.TypeProperty;

/**
 * Dissallow subtyping/overriding on the target declaration.
 *
 * @note In contrast to the semantics of other languages, it is perfectly fine
 *       to have a type which is both abstract and final, i.e. that cannot have
 *       any instance.
 *
 * @note Final types have bottom types as implicit subtypes. Take this into
 *   account when designing algorithms operating on the type lattice.
 */
public property final <: reflection.TypeProperty;


/**
 * A call to an inline function will be treated by the front-end. A back-end
 * will not create a representation for such a function.
 *
 * @note It is the responsibility of the caller to ensure that the call graph is
 *       acyclic.
 *
 * @note Functions taking Block-Parameters receive an implicit inline property.
 *
 * @author Timm Felden
 */
public property inline <: reflection.MemberProperty;


/**
 * Flags a function to be an entry point to the program.
 *
 * @note An entry point must be a type def without parameters. It can return
 *       either void or int
 *
 * @author Timm Felden
 */
public property entryPoint <: reflection.FunctionProperty;


/**
 * Tell the compiler to ignore a suppressible message category in the body of
 * the target entity
 *
 * @note do not use in tyr.lang; tyr packages should complie without it anyway
 *
 * @author Timm Felden
 */
public
property suppressCompilerMessage[name : StringLiteral]
      <: reflection.TypeProperty, reflection.MemberProperty;