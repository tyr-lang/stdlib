with container.StringReceiver;
with container.StringReceiverTarget;

/**
 * Holds functions to put an Integer into a StringReceiver.
 */
class IntegerShowOps <: StringReceiverTarget /* TODO mem.stackAllocated */ {
  // note to self: stackAllocated should be handeled by new and delete
  // correctly; this implies that valgrind cannot detect multiple deteles of
  // stackAllocated objcets but this is likely ok as most usecases will not
  // involve a delete anyway; there should be a postCheck warning if a delete
  // is defined

  val v : long
  val size : int
  new (v := v : long, size := size : int);

  override
  def insert(format : StringLiteral, sr : StringReceiver) : void {
    // format as single character
    if ("c" == format) {
      sr.put(character !! (v : long))
      return
    }

    // worst case buffer size is base 2: one sign and 64 digits
    val bufferSize = 65U;

    var b = new container.FlatSizedArray[byte, bufferSize];
    // insert chars in reverse
    var p = bufferSize;

    // check different bases
    var base = 10L
    if ("b" == format)
      base = 2L
    else if ("x" == format)
      base = 16L

    var i = v
    while (i != 0L || bufferSize == p) {
      val rem = i % base
      // '0' + value
      val c = 0x30i8 + byte !! rem.abs()
      --p
      b(p) = c
      i /= base
    }

    if(v < 0L) {
      // '-'
      --p
      b(p) = 0x2di8
    }

    val view = new SolidStringView(bufferSize-p, CRef[byte] !! b.shift(p));
    sr.put(view);
  }
}
