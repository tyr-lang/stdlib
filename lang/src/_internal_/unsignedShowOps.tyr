with container.StringReceiver;
with container.StringReceiverTarget;

/**
 * Holds functions to put an Unsigned into a StringReceiver.
 */
class UnsignedShowOps <: StringReceiverTarget /* TODO mem.stackAllocated */ {
  // note to self: stackAllocated should be handeled by new and delete
  // correctly; this implies that valgrind cannot detect multiple deteles of
  // stackAllocated objcets but this is likely ok as most usecases will not
  // involve a delete anyway; there should be a postCheck warning if a delete
  // is defined

  val v : Unsigned[64]
  val size : int
  new (v := v : Unsigned[64], size := size : int);

  override
  def insert(format : StringLiteral, sr : StringReceiver) : void {
    val bufferSize = 20U;

    // a long can be 19 digits and a - sign
    var b = new container.FlatSizedArray[byte, bufferSize];
    // insert chars in reverse
    var p = bufferSize;

    var i = v
    while (i > 0U) {
      val rem = i % 10U
      // '0' + value
      val c = 0x30i8 + byte !! rem.implicit()
      --p
      b(p) = c
      i /= 10U
    }

    val view = new SolidStringView(bufferSize-p, CRef[byte] !! b.shift(p));
    sr.put(view);
  }
}
