with container.StringReceiver;
with container.StringReceiverTarget;

/**
 * Holds functions to put an Unsigned into a StringReceiver.
 */
class UnsignedShowOps <: StringReceiverTarget /* TODO mem.stackAllocated */ {
  // note to self: stackAllocated should be handeled by new and delete
  // correctly; this implies that valgrind cannot detect multiple deteles of
  // stackAllocated objcets but this is likely ok as most usecases will not
  // involve a delete anyway; there should be a postCheck warning if a delete
  // is defined

  val v : Unsigned[64]
  val size : int
  new (v := v : Unsigned[64], size := size : int);

  override
  def insert(format : StringLiteral, sr : StringReceiver) : void {
    // format as single character
    if ("c" == format) {
      sr.put(character !! (v : Unsigned[64]))
      return
    }

    // worst case buffer size is base 2: one sign and 64 digits
    val bufferSize = 65U;

    var b = new container.FlatSizedArray[byte, bufferSize];
    // insert chars in reverse
    var p = bufferSize;

    // check different bases
    var base = 10U
    if ("b" == format)
      base = 2U
    else if ("x" == format)
      base = 16U

    var i = v
    while (i > 0U || bufferSize == p) {
      val rem = byte !! (i % base)
      // '0'/'a' + value
      val c = (if (rem >= 10u8) 0x57u8 else 0x30u8) + rem
      --p
      b(p) = c
      i /= base
    }

    val view = new SolidStringView(bufferSize-p, CRef[byte] !! b.shift(p));
    sr.put(view);
  }
}
