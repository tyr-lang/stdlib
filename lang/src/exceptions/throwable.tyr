/**
 * The base class of all exception handling. It is not allowed to be used
 * directly.
 *
 * Exceptions can be allocated and passed around but, once thrown, they will
 * be deleted when handling them stops regardless of escaping.
 *
 * TODO 0.8 check what is really used and delete all the rest again
 *
 * @note  The current exception handling is implemented on top of C++ exception
 *   handling. This is not really efficient and also not entirely correct
 *   regarding corner cases. Eventually, we need to implement Tyr exceptions on
 *   top of the Exception ABI. A consequence of this is that there is currently
 *   no such thing as rethrow.
 */
class Throwable <: abstract {

  /**
   * A linked list of suppressed exceptions.
   *
   * @note  if you create a cycle here, the program might crash eventually
   *
   * @note  throwing a suppressed exception is an error (TODO 0.8 ???)
   */
  public var suppressed : Throwable;

  /**
   * Produce a message that can be shown to explain what has happened.
   */
  public def message : String;


  protected[tyr.lang] new {
    suppressed = null
    // TODO Throwable should gather a stack trace on *allocation*
    // each rethrow should add a stack line to a separate list
    // note to self: we should check if we can add such a function with the
    // exception as parameter lying to llvm that the function is pure to ensure
    // that it isn't called if the exception would otherwise be optimized out
  }

  /**
   * Exceptions are deleted implicitly by handling them. As such, it is an error
   * to store a reference to a thrown exception.
   *
   * Also, it would be an error if a destructor could throw. Hence, it is final.
   */
  delete <: final {
    delete suppressed
  }

  private
  type def ensureException(this : Throwable) : Throwable <: final, inline {
    if (null == this)
      new NullAccess
    else
      this
  }

  /**
   * Throw this exceptions.
   *
   * @throws NullAccess  if null == this
   *
   * @note  this must be a fresh not null exception that is deleted once caught
   *
   * @note  throwing exceptions that have been caught or suppressed is forbidden
   *
   * @note  Anything about exception handling is expensive. So, performing
   *   checks really isn't an issue.
   *
   * @suppressCompilerMessage W_OOP_UNLIKELY_CAST  the cast converts between C
   *   and tyr types
   */
  private
  type def `throw`(this : Throwable) : WillThrow[Throwable] <: final, inline,
    mem.consumed,
    suppressCompilerMessage["W_OOP_UNLIKELY_CAST"] {

    // note: at the moment cxa throw and allocate come at a pair as each of our
    // handlers catches, terminates and deallocates the cxa part of exception
    // handling in order to allow us to completely avoid it in local-only cases

    // allocate an exception container for Throwable which is a pointer
    val ex = __cxa_allocate_exception(8L);

    (Ref[Throwable] !! (ex : cxaException)) = this;

    __cxa_throw(ex, mkTypeID(), null);
  }

  /**
   * Suppress the current exception and throw the survivor.
   *
   * @note if the current exception is Fatal, the current exception stays and
   *   this is suppressed instead, even if it is also Fatal
   */
  // public
  // type def suppress(this : Throwable) : WillThrow[Throwable] <: final, inline {
  //   val t =
  //     if (null == this)
  //       new NullAccess
  //      else
  //        this

  //   val current = currentException()
  //   if (null == current)
  //     t.throw()

  //   if (Fatal ? current) {
  //     // note: strictly speaking, this is more complex; wait for exact rules
  //     // until someone really runs into that issue
  //     suppressed = current.suppressed
  //     current.suppressed = t
  //     t.cancel()
  //     current.rethrow()
  //   } else {
  //     // note: strictly speaking, this is more complex; wait for exact rules
  //     // until someone really runs into that issue
  //     t.suppressed = current
  //     current.cancel();
  //     t.rethrow()
  //   }
  // }

  // TODO implement once I can ensure that throw/rethrow and cancelation will
  // work correctly here
  // private
  // type def handleForeign() : ForeignException {
  //   // delete the current exception
  //   __cxa_end_catch()
  //   return new ForeignException
  // }

  /**
   * Let a caught exception stop in the current handler. This function is called
   * implicitly at the end of the handler.
   *
   * @todo  implement suppression as intended; this requires checking if there
   *   is an exception below the current top.
   *
   * @todo  ensure that the argument is untyped exception; I guess it needs to
   *   be inline to reach this goal
   */
  private
  type def cancel(this : Throwable) : void <: mem.consumed, final {
    // note:  __cxa_free_exception(this) happens at the beginning of the handler
    delete this
  }

  /** declare i8* @__cxa_allocate_exception(i64) */
  private
  type def __cxa_allocate_exception(size : long) : cxaException
    extern cxa.__cxa_allocate_exception;

  /** declare void __cxa_free_exception(void *thrown_object) */
  private
  type def __cxa_free_exception(exV : cxaException) : void
    extern cxa.__cxa_free_exception;

  /** declare i8* @__cxa_begin_catch(i8*) */
  private
  type def __cxa_begin_catch(exV : observablePointer) : observablePointer
    extern cxa.__cxa_begin_catch;

  /** declare void @__cxa_end_catch() */
  private
  type def __cxa_end_catch() : void
    extern cxa.__cxa_end_catch;

  /** declare i8* @__cxa_current_primary_exception() */
  private
  type def __cxa_current_primary_exception() : cxaException
    extern cxa.__cxa_current_primary_exception;

  /** declare void @__cxa_throw(i8*, i8*, i8*) */
  private
  type def __cxa_throw(
    e : cxaException,
    t : observablePointer,
    dest : observablePointer
  )
    : WillThrow[Throwable]
    extern cxa.__cxa_throw;

  /** declare void @__cxa_rethrow() */
  private
  type def __cxa_rethrow() : WillThrow[Throwable]
    extern cxa.__cxa_rethrow;

  /**
   * Create the C++ typeID structure pased to throw
   */
  private type def mkTypeID() : observablePointer <: reflection.native;

  /**
   * Read the current exception; null if not currently handling an exception
   */
  private type def currentException() : Throwable <: reflection.native;
}

private type cxaException <: observablePointer;