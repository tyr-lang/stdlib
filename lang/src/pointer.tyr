/**
 * the super type of all pointers; basically C's "void*"
 *
 * @note in contrast to C, C++ and Java, arbitrary pointers do not have a null.
 *       This is because some pointer-like types such as ref do not have a null.
 *
 * @note Arbitrary pointer values may not be observable. Therefore, they do not
 *       offer any operators.
 *
 * @note Non-observable pointers may still alias.
 *
 * @author Timm Felden
 */
public type pointer <: any, reflection.native;


/**
 * An pointer that can be observed by regular code in the form of equivalence.
 *
 * @author Timm Felden
 */
public type observablePointer <: pointer {

  /* flat value comparison. Can also be used if this == null */
  public
  def != (v : observablePointer) : bool
      <: reflection.native, operator.precedence[80];

  /* flat value comparison. Can also be used if this == null */
  public
  def == (v : observablePointer) : bool
      <: reflection.native, operator.precedence[80];
}


/**
 * The type of null. This is the bottom element of the observable pointer
 * latice.
 *
 * @note this is the type of an entity that is known to be null. It is
 *   completely correct that the compiler won't let you perform operations on
 *   them as they will all fail anyway.
 */
public interface Null <: observablePointer, final;
