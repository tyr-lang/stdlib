/**
 * An equivalence relation on T. The rules of equals are those of mathmatical
 * equivalence relations, i.e.
 *
 * - reflexive: for any value x : T, x.equals(x) must return true
 * - symmetric: for any values x : T and y : T, x.equals(y) == y.equals(x)
 * - transitive: for any values x : T, y : T, and z : T, x.equals(y) & y.equals(z) implies x.equals(z)
 *
 * Furthermore, there are two rules originating from mutable state:
 *
 * - consistent: for any mutable values x : T and y : T, x.equals(y) returns
 *  identical values irrespective of the number of invocations or modifications of x or y
 * - total: an invocation of equals must terminate and return either true or false
 *
 * The latter two are usually required to by users of EQRs to provide a consistent
 * behaviour.
 *
 * @note we do not use math syntax (i.e. ~), as this conflicts with common
 * negation on integers.
 *
 * @note in contrast to other languages, a user is not expected to perform an
 * identity check first. The identity check has to be performed by the EQR
 * implementation if desired.
 */
public interface EQR[T : Type[any]] <: any {
  /**
   * equals is stateless.
   *
   * @note a class def on a type interface is the promise of a static function
   *       existing in the implementing type (this comment is to be deleted)
   */
  public class def equals (left : T, right : T) : bool;
}

/**
 * The minimal EQR on T, i.e. comparison of the raw bits. Corresponds to == of
 * many types.
 */
public type MinEQR[T : Type[any]] <: any, EQR[T] {
  // note to self: types do not have an RT representation
  // note to self: It could be, that there still is a difference wrt. variant
  // types. In that case, we could introduce class members on types with a
  // similar semantics as their counterparts in other kinds.
  override type def equals (left : T, right : T) : bool <: native;
}

/**
 * Derive consistent == and != from an equivalence relation.
 */
public interface EQOps[T : Type[any], E : EQR[T]] <: any {

  type def != (left : T, right : T) : bool
              <: inline, operator.precedence[80]
              = !E.equals(left, right)

  type def == (left : T, right : T) : bool
              <: inline, operator.precedence[80]
              = E.equals(left, right)
}

/**
 * This is the well known and massively criticised version of EQR from Java.
 * The only reason to have it in Tyr is, that it is not as dangerous as in Java
 * if it is not introduced by Object.
 * Also, there are some natural applications to it, where it is actually
 * possible to provide a correct implementation. In these scenarios, the type
 * hierarchy below T should be sealed and all redefinitions of eq should be
 * aware of each other.
 *//* TODO blocker 0.7: What is missing in the code below is a means to express
  that this.type <: T resulting in eq applications in equals not being type
  correct

interface InheritedEQR[T : Class] <: Object, EQR[T] {
  /**
   * Dispatching implementation of eq. Dispatching is performed on this unless
   * this is null. In that case dispathing is performed on v.
   * /
  def eq(v : T) : bool;

  /**
   * Perform the required null-check and reordering to work with null.equals(v).
   * @todo Requires the type checker to realize that instances of T : Class are at least Objects
   * /
  type def equals (left : T, right : T) : bool {
    if(left == right)
      true
    else if(null == left)
      right.eq(left)
    else
      left.eq(right)
  }
}*/
