/**
 * The type of a class interface, i.e. a regular interface.
 *
 * @note Runtime type checking against interface types is performed using a
 *       linked hash map and is therefore linear in the number of interfaces
 *       implemented by the target object.
 *
 * @note it is not possible for this class to have (object) def or class members
 *
 * @author Timm Felden
 */
public class Interface <: Type, mem.eternal {

  /**
   * Interface initialization is performed by the back-end globally.
   * The initialization of Interface values happens even before evaluation of
   * global initialization.
   */
  private new <: native;

  /**
   * Check if ref is an instance of this type
   *
   * @note true if null is passed
   */
  public type def ? (this : Interface, ref : Object) : bool
                    <: operator.precedence[90] =
    null == ref || ref.class.itypes.contains(this)

  /**
   * Check if ref is an instance of this type and return it in that case
   *
   * @return null if this is not an instance of the class or if ref is null
   *
   * @note a future version may throw an exception if ref is no instance of this
   *
   * @note a future version may add a flag to stop program execution if ref is
   *       not an instance of this
   */
  public type def ! (this : Interface, ref : Object) : this
                    <: operator.precedence[90] =
    if (null == ref) null
    else if (this ? ref) this !! ref
    else null
}

/**
 * A pointer to the super ITypes and a list of all interfaces implemented by
 * this type and not by its super types.
 *
 * @note if a class contributes no new classes, the ITypes pointer of the super
 *       class is used
 *
 * @note if a class implements no interfaces, the ITypes pointer is null
 *
 * @note ITypes pointers may be shared between classes implementing the same set
 *       of interfaces
 */
type ITypes <: native, mem.eternal {

  val super : mem.HeapPointer[ITypes]

  val size : container.size_t;
  
  // var entries : container.FlatSizedArray[Interface, 0U];
  var entries : container.FlatSizedArray[observablePointer, 0U];

  type def contains(this : mem.HeapPointer[ITypes], t : Interface) : bool {
    if (null == this)
      return false
    
    var i = size
    while (0u64 != i) {
      --i
      if (t == entries(i))
        return true
    }
    return contains(super, t)
  }
}


/**
 * Abstract layout is 
 * record ITable { ITable* super; int size; (ITableKey, Offset)[0] entries }
 *
 * Concrete layout is
 * record _TIT:*** { ITable info; (ITableKey, Offset)[size] }
 *
 * @note instances of this type can only be created by sleipnir
 *
 * @note this types works diffirent from other types in sleipnir translation
 *       because actual instances use an implicit sub type of ITable
 *
 * @note ITables are deep eternal; its components must not be deleted
 *
 * @author Timm Felden
 */
type ITable <: native, mem.eternal {
  val super : mem.HeapPointer[ITable];
  
  val size : container.size_t;
  
  var entries : container.FlatSizedArray[ITableEntry, 0U];
  
  /**
   * the ITable access algorithm is basically:
   *
   * @note it requires that the front-end has proven that the itable will
   *       contain the requested key
   *
   * @note the GEP instruction usually used to perform the access is replaced by
   *       calling get at runtime, casting this to i8*, performing GEP with the
   *       result, casting that result back to the expected type and continue
   *       afterwards as if a static access had happened
   */
  type def get(it : mem.HeapPointer[ITable], key : int) : int {
    // note: no null checking is required, because the key is always found in a 
    // type-correct program
    var i = it.size
    while (0u64 != i) {
      --i
      val e = it.entries(i)
      if(key == e.ITableKey)
        return e.offset
    }
    return get(it.super, key)
  }
}

/* created by sleipnir, required in ITable subtype creation and hence native */
type ITableEntry <: native, mem.eternal {
  val ITableKey : int;
  val offset : int;
}
