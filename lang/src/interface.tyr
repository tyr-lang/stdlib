/**
 * The type of a class interface, i.e. a regular interface.
 *
 * @todo typeIDs and cast functions too
 *
 * @note Runtime type checking against interface types is performed using a
 *       linked hash map and is therefore linear in the number of interfaces
 *       implemented by the target object.
 *
 * @note Runtime representation of interfaces is pretty useless without generic
 *       type paramaters. This will likely be implemented in 0.7 or 0.9.
 *
 * @note it is not possible for Interface to have (object) def or class members
 *
 * @author Timm Felden
 */
class Interface <: Type {

  /**
   * Interface initialization is performed by the back-end globally.
   * The initialization of Interface values happens even before evaluation of
   * global initialization.
   *
   * @todo make it private
   */
  new <: native;
}

/* TODO 0.7
class ITypes {
  /**
   * Initiallization is perform while Classes are constructed.
   *
   * @todo make it private
   * /
  new <: native;

  val implemenets : Array[Interface]
  val next : ITypes

  type def contains(this : ITypes, t : Interface) {
    if(null == this) false
    else implements.exists i : Interface do (t == i) || next.contains(t)
  }
}
*/

/**
 * Abstract layout is 
 * record ITable { ITable* super; int size; (ITableKey, Offset)[0] entries }
 *
 * Conccrete layout is
 * record _TIT:*** { ITable info; (ITableKey, Offset)[size] }
 *
 * @author Timm Felden
 */
type ITable <: native {
/*
  the ITable access algorithm is basically:

  def get(ITK key) : Offset {
    entries.foreach p : (ITK, Offset) do { if(p.1 == key) return p.2 }
    super.get(key)
  }

  @note it requires that the front-end has proven that the itable will contain
        the requested key

  @note the GEP instruction usually used to perform the access is replaced by
        calling get at runtime, casting this to i8*, performing GEP with the
        result, casting that result back to the expected type and continue
        afterwards as if a static access had happened
*/
}
