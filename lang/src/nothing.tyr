/**
 * The computation will throw instead of terminating the regular control flow.
 * Hence, WillThrow inherits from every other type except NoReturn, as any
 * result can be produced by throwing an exception before its production.
 *
 * @note  This is an interface, as value type interfaces are the only legal
 *   subtype of anything else.
 *
 * @note  WillThrow cannot have a type parameter since the correct
 *   join with another type *or any call within the body not guarded by try*
 *   would result in the parameter getting erased. Hence, the overhead of
 *   tracking the type and implementing inference rules correctly does not
 *   justify the benefit. (note to self: @throws should be a known tyr doc tag)
 *
 * @note  The repr of WillThrow is void.
 *
 * @todo  It should be legal to throw an exception at places where a type has to
 *   be supplied. The semantics of such a behaviour would be that the throw
 *   happens before the evaluation of that type. Such unevaluatable types can be
 *   replaced by Class[NoReturn].
 *
 * @todo 0.8  Restrict explicit usage to function return types
 *
 * @todo 0.8: why can this be final? it should be
 *   private[_root_] protected[NoReturn] or sealed
 */
public
interface WillThrow <: any, reflection.native, final;

/**
 * The computation will not terminate, i.e. control flow will somehow not get to
 * this point. To some, it might appear counter-intuitive that the type of a
 * return expression is NoReturn. This is because the evaluation of a return
 * cannot be observed from the perspective of the subsequent instruction in the
 * same function following regular control flow.
 *
 * @note  This is an interface, as value type interfaces are the only legal
 *   subtypes of anything else.
 *
 * @note  The repr of NoReturn is void as we do not emit code for entities that
 *   are not observed.
 *
 * @note  Throwing null is already non-observable.
 *
 * @note  Reaching a location of type NoReturn has undefined behaviour even if
 *   this happens via exception handling.
 */
public interface NoReturn <: any, WillThrow, reflection.native, final;
