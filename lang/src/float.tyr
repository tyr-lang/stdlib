/**
 * The general floating point type.
 *
 * @author Timm Felden
 *
 * @note for now, supported values of n are just 32 and 64
 *
 * @note we deviate from our naming scheme, because float is a very common name for Float[32]
 */
val type Float[size : int] <: any, native {

  def - : Float[size] <: native, operator.precedence[200];

  def ** (x : Float[size]) : Float[size]
         <: native, operator.precedence[150], operator.rightAssociative;

  def * (x : Float[size]) : Float[size]
        <: native, operator.precedence[120];
  def \ (x : Float[size]) : Float[size]
        <: native, operator.precedence[120];
  def % (x : Float[size]) : Float[size]
        <: native, operator.precedence[120];

  def + (x : Float[size]) : Float[size]
        <: native, operator.precedence[110];
  def - (x : Float[size]) : Float[size]
        <: native, operator.precedence[110];

  def < (x : Float[size]) : bool
        <: native, operator.precedence[90];
  def <= (x : Float[size]) : bool
        <: native, operator.precedence[90];
  def > (x : Float[size]) : bool
        <: native, operator.precedence[90];
  def >= (x : Float[size]) : bool
        <: native, operator.precedence[90];

  def != (x : Float[size]) : bool <: native, operator.precedence[80];
  def == (x : Float[size]) : bool <: native, operator.precedence[80];
}

/**
 * Literals are subtypes of arbitrary floats.
 */
val type FloatLiteral[size : int] <: Float[size], noVar;

// common Float names
type float  := Float[8];
type double := Float[16];

