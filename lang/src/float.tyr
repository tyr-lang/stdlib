/**
 * The general floating point type.
 *
 * @author Timm Felden
 *
 * @note for now, supported values of n are just 32 and 64
 *
 * @note we deviate from our naming scheme, because float is a very common name for Float[32]
 */
public type Float[size : IntegerLiteral[32]] <: reflection.native {

  public def - : Float[size] <: reflection.native, operator.precedence[200];

  public def ** (x : Float[size]) : Float[size]
         <: reflection.native, operator.precedence[150], operator.rightAssociative;

  public def * (x : Float[size]) : Float[size]
        <: reflection.native, operator.precedence[120];
  public def \ (x : Float[size]) : Float[size]
        <: reflection.native, operator.precedence[120];
  /**
   * extension of mod to Floats: this - (this / x).floor() * x
   * @note this has been taken from Lua 5.1
   */
  public def % (x : Float[size]) : Float[size]
        <: reflection.native, operator.precedence[120];

  public def + (x : Float[size]) : Float[size]
        <: reflection.native, operator.precedence[110];
  public def - (x : Float[size]) : Float[size]
        <: reflection.native, operator.precedence[110];

  public def < (x : Float[size]) : bool
        <: reflection.native, operator.precedence[90];
  public def <= (x : Float[size]) : bool
        <: reflection.native, operator.precedence[90];
  public def > (x : Float[size]) : bool
        <: reflection.native, operator.precedence[90];
  public def >= (x : Float[size]) : bool
        <: reflection.native, operator.precedence[90];

  public def != (x : Float[size]) : bool <: reflection.native, operator.precedence[80];
  public def == (x : Float[size]) : bool <: reflection.native, operator.precedence[80];

  public def ceil : Float[size] <: reflection.native;
  public def floor : Float[size] <: reflection.native;
}

/**
 * Literals are subtypes of arbitrary floats.
 */
public
type FloatLiteral[size : IntegerLiteral[32]]
      <: Float[size], reflection.CT, reflection.noVar;

// common Float names
public type float  := Float[32];
public type double := Float[64];

