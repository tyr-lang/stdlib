/**
 * The general floating point type.
 *
 * @author Timm Felden
 *
 * @note for now, supported values of n are just 32 and 64
 *
 * @note we deviate from our naming scheme, because float is a very common name for Float[32]
 */
public type Float[Size : IntegerLiteral[32]] <: reflection.native {

  public def - : Float[Size] <: reflection.native, operator.precedence[200];

  public def ** (x : Float[Size]) : Float[Size]
         <: reflection.native, operator.precedence[150], operator.rightAssociative;

  public def * (x : Float[Size]) : Float[Size]
        <: reflection.native, operator.precedence[120];
  public def / (x : Float[Size]) : Float[Size]
        <: reflection.native, operator.precedence[120];
  /**
   * extension of mod to Floats: this - (this / x).floor() * x
   * @note this has been taken from Lua 5.1
   */
  public def % (x : Float[Size]) : Float[Size]
        <: reflection.native, operator.precedence[120];

  public def + (x : Float[Size]) : Float[Size]
        <: reflection.native, operator.precedence[110];
  public def - (x : Float[Size]) : Float[Size]
        <: reflection.native, operator.precedence[110];

  public def < (x : Float[Size]) : bool
        <: reflection.native, operator.precedence[90];
  public def <= (x : Float[Size]) : bool
        <: reflection.native, operator.precedence[90];
  public def > (x : Float[Size]) : bool
        <: reflection.native, operator.precedence[90];
  public def >= (x : Float[Size]) : bool
        <: reflection.native, operator.precedence[90];

  public def != (x : Float[Size]) : bool <: reflection.native, operator.precedence[80];
  public def == (x : Float[Size]) : bool <: reflection.native, operator.precedence[80];


  // self modifying binary operators
  public type def *= (this : Ref[Float[Size]], v : Float[Size]) : Float[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this * v;
  }
  public type def /= (this : Ref[Float[Size]], v : Float[Size]) : Float[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this / v;
  }
  public type def %= (this : Ref[Float[Size]], v : Float[Size]) : Float[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this % v;
  }

  public type def += (this : Ref[Float[Size]], v : Float[Size]) : Float[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this + v;
  }
  public type def -= (this : Ref[Float[Size]], v : Float[Size]) : Float[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this - v;
  }

  public def abs : Float[Size] <: reflection.native;

  public def ceil : Float[Size] <: reflection.native;
  public def floor : Float[Size] <: reflection.native;

  public def sqrt : Float[Size] <: reflection.native;

  public def log : Float[Size] <: reflection.native;
  public def log2 : Float[Size] <: reflection.native;
  public def log10 : Float[Size] <: reflection.native;

  public def cos : Float[Size] <: reflection.native;
  public def sin : Float[Size] <: reflection.native;
  public def tan : Float[Size] <: reflection.native;

  public def acos : Float[Size] <: reflection.native;
  public def asin : Float[Size] <: reflection.native;
  public def atan : Float[Size] <: reflection.native;
  public type def atan (this : Float[Size], y : Float[Size]) : Float[Size]
           <: reflection.native;

  /**
   * @return this * m + a
   */
  public
  type def fma (this : Float[Size], m : Float[Size], a : Float[Size])
       : Float[Size] <: reflection.native;

  /**
   * Convert the float to an integer
   */
  public
  def toInt[NewSize : IntegerLiteral[32] = 32] : Integer[NewSize]
      <: reflection.native;
}

/**
 * Literals are subtypes of arbitrary floats.
 */
public
type FloatLiteral[Size : IntegerLiteral[32]]
      <: Float[Size], reflection.Literal,
         reflection.CT, reflection.noVar, final;

// common Float names
public type float  := Float[32];
public type double := Float[64];

