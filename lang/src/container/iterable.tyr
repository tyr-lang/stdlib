/**
 * The base of the standard container library.
 *
 * It provides rather general but inefficient implementations of standard
 * operations on containers. Operations are usually overriden by far better
 * versions in concrete classes. Hence, try to tell the compiler which kind of
 * container you are currently using.
 *
 * @note This class is a view. As such it is covariant but offers no update.
 *
 * @author Timm Felden
 */
// TODO type interface IterableOnce
public class Iterable[+T : Type[any]] <: abstract {

  /**
   * retrieve an iterator over the elements of this collection
   */
  public def iterator : Iterator[T];

  /**
   * Perform action for each element
   */
  public def foreach (x : BlockParameter[T], action : Block[any]) : void
    = iterator().foreach(x, action)

  /**
   * Count the number of elements fulfilling predicate
   */
  public def count (x : BlockParameter[T], predicate : Block[bool]) : int
    = iterator().count(x, predicate)

  /**
   * Check predicate until the predicate is false or all elements have been
   * checked
   */
  public def forall (x : BlockParameter[T], predicate : Block[bool]) : bool {
    val iter = iterator()
    val r = iter.forall(x, predicate)
    delete iter
    r
  }

  /**
   * Check predicate until the predicate is false or all elements have been
   * checked
   */
  public def exists (x : BlockParameter[T], predicate : Block[bool]) : bool {
    val iter = iterator()
    val r = iter.exists(x, predicate)
    delete iter
    r
  }

  /**
   * fold elements of this container
   */
  public
  def fold (initial : T,
            left : BlockParameter[T], right : BlockParameter[T],
            step : Block[T]) : T
    = iterator().fold(initial, left, right, step)
}
