/**
 * The base class of maps.
 *
 * @note updating methods do not return. Return true if they have been updated
 *   woild require an additional equivalence relation for values just for this
 *   purpose. Returning the argument value is often not used and, thus,
 *   overhead.
 */
public
class Map[K : Type[_], V : Type[_], EQ : def(K, K) : bool = MinEQR[K].equals]
      <: Seq[Pair[K, V]], abstract {

  /**
   * Check if k is contained in this map.
   */
  public def contains(k : K) : bool;

  /**
   * Return the value stored for k in this map.
   *
   * @pre contains(k)
   */
  public def apply(k : K) : V;

  /**
   * Return the value stored for k in this map.
   *
   * @pre contains(k)
   */
  public type def get(this : Map[K, V, EQ], k : K) : V <: inline = apply(k);

  public def getOrElse(k : K, otherwise : Block[V]) : V
    = if(contains(k)) get(k) else otherwise.eval()

  public def getOrUpdate(k : K, otherwise : Block[V]) : V
    = if(contains(k)) get(k) else {
        val r = otherwise.eval()
        add(k, r)
        r
      }

  /**
   * Check if all elements of ks are contained in this map.
   */
  public
  def containsAll(ks : Iterable[K]) : bool = ks.forall k : K do (contains(k));

  /**
   * Ensure that k is associated with v.
   *
   * @post v == this(k)
   */
  public def update(k : K, v : V) : void;

  /**
   * Ensure that k is associated with v.
   *
   * @post v == this(k)
   */
  public
  type def add(this : Map[K, V, EQ], k : K, v : V) : void <: inline
    = update(k,v)

  /**
   * Ensure that p.left is associated with p.right.
   *
   * @post this(p.left)
   */
  public def add(p : Pair[K, V]) : void = add(p.left, p.right)
  public
  type def += (this : Map[K, V, EQ], p : Pair[K, V]) : void <: inline
    = add(p);

  /**
   * Check if all ps are contained in this map. Add each that is not.
   *
   * @post this(v)
   */
  public def addAll(ps : Iterable[Pair[K, V]]) : void {
    ps.foreach p : Pair[K, V] do {
      add(p)
    }
  }
  public
  type def ++= (this : Map[K, V, EQ], ps : Iterable[Pair[K, V]]) : void
        <: inline
    = addAll(ps);

  /**
   * Check if v is contained in this set. If it is, remove it.
   *
   * @post !this(k)
   */
  public def remove(k : K) : void;
  public type def -= (this : Map[K, V, EQ], k : K) : void <: inline = remove(k);

  /**
   * Check if vs are contained in this set. Remove each that is.
   *
   * @post âˆ€ k in ks. !this(k)
   */
  public def removeAll(ks : Iterable[K]) : void {
    ks.foreach k : K do {
      remove(k)
    }
  }
  public
  type def --= (this : Map[K, V, EQ], ks : Iterable[K]) : void <: inline
    = removeAll(ks);

  // note to self: maybe we also need remove Iterabel[Pair]

  // TODO public def invert : Map[V, K]
}