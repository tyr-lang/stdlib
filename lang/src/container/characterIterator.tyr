/**
 * An iterator transforming a byte iterator on the fly into a character
 *  iterator.
 *
 * @note If the bytestream does not result in a valid UTF-8 codepoint a 0xFFFD
 *   is inserted and decoding continues at the next byte
 *
 * @author Timm Felden
 */
public class CharacterIterator <: Iterator[character] {
  private type val invalid = '\ufffd'
  private type def char(v : byte) <: inline = character !! v.resize[21]()
  private type def char(v : Unsigned[21]) <: inline = character !! v

  private var bytes : Iterator[byte];

  public new(bytes := bytes : Iterator[byte] <: mem.free);
  public delete {
    delete bytes
  }

  override
  def hasNext() : bool = bytes.hasNext()

  override
  def next() : character {
    var b = bytes.next()

    // 0xxxxxxx
    if(0u8==b&0x80u8){
      return char(b&0x7fu8)
    }

    // 110xxxxx 10xxxxxx
    if(0xc0u8==b&0xe0u8){
      if(!hasNext())
        return invalid

      var r = char(b&0x1fu8) << 6u21
      b = bytes.next()
      if(0x80u8 != b&0xc0u8)
        return invalid

      return char(r | char(b&0x3fu8))
    }

    // 1110xxxx 10xxxxxx 10xxxxxx
    if(0xe0u8==b&0xf0u8){
      if(!hasNext())
        return invalid

      var r = char(b&0x0fu8) << 12u21
      b = bytes.next()
      if(0x80u8 != b&0xc0u8 || !hasNext())
        return invalid

      r |= char(b&0x3fu8) << 6u21
      b = bytes.next()
      if(0x80u8 != b&0xc0u8)
        return invalid

      return char(r | char(b&0x3fu8))
    }

    // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
    if(0xf0u8==b&0xf8u8){
      if(!hasNext())
        return invalid

      var r = char(b&0x07u8) << 18u21
      b = bytes.next()
      if(0x80u8 != b&0xc0u8 || !hasNext())
        return invalid

      r |= char(b&0x3fu8) << 12u21
      b = bytes.next()
      if(0x80u8 != b&0xc0u8 || !hasNext())
        return invalid

      r |= char(b&0x3fu8) << 6u21
      b = bytes.next()
      if(0x80u8 != b&0xc0u8)
        return invalid

      return char(r | char(b&0x3fu8))
    }

    return invalid
  }
}

