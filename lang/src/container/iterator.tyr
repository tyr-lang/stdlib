/**
 * Abstraction of iteration over a container.
 *
 * @note  Iterators must be deleted before the iterated container.
 *
 * @note  It is unspecified for Iterators in general if they can deal with
 *   modifications of the underlying container.
 *
 * @note  Iterator has currently no map, because the resulting container would
 *   likely result in a memory leak. This statement may no longer be true
 *   when escape-based auto delete is implemented.
 *
 * @note  All exhaustive binder calls consume the iterator
 *
 * @author Timm Felden
 */
public class Iterator[+T : Type[any]] <: abstract {

  /**
   * retrieve the next element and move the iterator by one element
   *
   * @pre hasNext
   */
  public def next : T;

  /**
   * check if the iterator can provide a next element
   *
   * @note if hasNext has ever returned false, it must not return true for any
   *       subsequent call
   *
   * @note if hasNext has returned true, it must return true for any subsequent
   *       call before the next call to next of the same iterator instance
   */
  public def hasNext : bool;

  /**
   * Perform action for each remaining element of the iterator and delete the
   * iterator
   *
   * @post !hasNext
   */
  public def foreach (x : BlockParameter[T], action : Block[any]) : void
          <: mem.consumed = try {
    while(hasNext()) {
      x = next()
      action.eval()
    }
  } finally delete this

  /**
   * Count the number of elements fulfilling predicate and delete the iterator
   *
   * @post !hasNext
   */
  public def count (x : BlockParameter[T], predicate : Block[bool]) : size_t
          <: mem.consumed = try {
    var r = 0U
    while(hasNext()) {
      x = next()
      if(predicate.eval())
        ++r;
    }
    r
  } finally delete this

  /**
   * Check predicate until the predicate is false or the iterator is empty
   *
   * @post !result || !hasNext
   *
   * @note does not consume the iterator as it may still be non-empty
   */
  public def forall (x : BlockParameter[T], predicate : Block[bool]) : bool {
    while(hasNext()) {
      x = next()
      if(!predicate.eval())
        return false
    }
    return true
  }

  /**
   * Check predicate until the predicate is false or the iterator is empty.
   *
   * Store the index of the current iteration in index.
   *
   * @post !result || !hasNext
   *
   * @note does not consume the iterator as it may still be non-empty
   */
  public def forall (x : BlockParameter[T],
                     index : BlockParameter[size_t],
                     predicate : Block[bool]) : bool {
    var i = 0U
    while(hasNext()) {
      index = i
      x = next()
      if(!predicate.eval())
        return false;

      ++i
    }
    return true;
  }

  /**
   * Check predicate until the predicate is true or the iterator is empty
   *
   * @post result || !hasNext
   *
   * @note does not consume the iterator as it may still be non-empty
   */
  public def exists (x : BlockParameter[T], predicate : Block[bool]) : bool {
    while(hasNext()) {
      x = next()
      if(predicate.eval())
        return true
    }
    return false
  }

  /**
   * fold left on all remaining elements and delete the iterator
   *
   * @post !hasNext
   */
  public def fold (initial : T,
                   left : BlockParameter[T], right : BlockParameter[T],
                   step : Block[T]) : T <: mem.consumed = try {
    var r = initial;
    while(hasNext()) {
      left = r;
      right = next();
      r = step.eval();
    }
    r
  } finally delete this

  /**
   * Check if this and other return the same number of elements that compare
   * all to true in order.
   *
   * @note  consumes this and other irrespective of the number of elements
   *   compared.
   */
  public
  def sameElements[
    eq : def (T, T) : bool = MinEQR[T].equals
  ](
    other : Iterator[T] <: mem.free
  ) : bool
   <: mem.consumed =
    // ensure that an iterator can be compared to itself
    if (other == this) {
      delete this // == other
      true
    } else try {
      var r = true
      var hn : bool
      var on : bool

      while (r && ((hn = hasNext()) &! (on = other.hasNext()))) {
        r = eq(next(), other.next())
      }
      if r {
        r = (hn == on)
      }
      r
    } finally delete this, other

  /**
   * Take all elements from this iterator, add them to an ArrayBuffer and delete
   * the iterator.
   */
  public def toBuffer : ArrayBuffer[T] <: mem.consumed = try {
    var r = new ArrayBuffer[T]
    while(hasNext()) {
      r += next()
    }
    r
  } finally delete this

  /**
   * Wrap this iterator in a buffered iterator owning this.
   */
  public type def buffered(this : Iterator[T]) : BufferedIterator[T]
               <: mem.consumed, inline
                = if (BufferedIterator[T] ? this) (BufferedIterator[T] ! this)
                  else new BufferedIterator[T](this)

  /**
   * Take another Iterator and create a chained iterator. Ownership of both
   * iterators is transfered to the result.
   */
  public type def ++ (this : Iterator[T], other : Iterator[T]) : Iterator[T]
               <: operator.precedence[110], inline
                = ChainedIterator[T].apply(this, other)
}
