/**
 * Helper class to create common range iterators.
 *
 * @author Timm Felden
 */
public type range {

  /**
   * Iterate inclusive from exclusive until.
   */
  public type def apply(from : int, until : int)
    = new IntRangeIterator(from, until);

  test "sum" {
    6 == range(0, 4).fold(0) l,r do (l+r)
  }
}

/**
 * Step over integers until the last value which is inclusive. Increment by one
 * on each step.
 *
 * @author Timm Felden
 */
public class IntRangeIterator[Size : IntegerLiteral[32] = 32]
     <: Iterator[Integer[Size]]{
  var current : Integer[Size]
  val last : Integer[Size]

  new (current := first : Integer[Size], last := last : Integer[Size]);
  new (last := last : Integer[Size]) {
    current = last ^ last
  }

  override def next : Integer[Size] {
    val r : Integer[Size] = current
    ++current
    r
  }

  override def hasNext = current < last
}