/**
 * An array of Ts. In essence, this corresponds to C's T[].
 * The array is heap-allocated unless the optimizer chooses stack allocation.
 * This optimization requires a proper call to delete.
 *
 * @note represented as T*
 *
 * @author Timm Felden
 */
public type FlatArray[T : Type[any]] <: observablePointer, native {

  /**
   * Create a new array with undefined contents.
   */
  public new (size : index_t) <: native;

  /**
   * Release the memory required to represent this array.
   */
  public delete <: native;

  /**
   * Return the element at the given index (starting at 0).
   * @note it is the callers obligation to ensure that the index is valid
   */
  public def apply(index : index_t) : T <: native;

  /**
   * Update the element at the given index with v and return v (starting at 0).
   * @note it is the callers obligation to ensure that the index is valid
   *
   * @todo should be [S <: T](size_t, S) : S
   */
  public def update(index : index_t, v : T) : T <: native;

  /**
   * Return an array shifted by offset elements.
   */
  public def shift(offset : index_t) : FlatArray[T] <: native;
}

/**
 * An array of Ts. In essence, this corresponds to C's T[Size].
 * The representation of the array is truely flat, i.e. it can be embedded into
 * other containers.
 * It is legal to have Size == 0, but not Size < 0.
 * A flat zero-sized array is only useful to index-access fields of the arrays
 * base type following its definition.
 * It would be nice if the compiler could provide diagnostics for this pattern
 * as it is the only useful application, but a very useful one when it comes to
 * generic algorithm implementations.
 *
 * @note llvm won't let us access elements by index if the array is represented
 *       as flat array. Hence, we need CRefs first before can turn the API into
 *       what one would expect it to be.
 *
 * @author Timm Felden
 */
public type FlatSizedArray[T : Type[any], Size : size_t] <: any, native {

  /**
   * create an array with undefined contents.
   */
  public new;

  // we do not require a delete as it would be a nop anyway

  /**
   * Return the element at the given index (starting at 0).
   * @note it is the callers obligation to ensure that the index is valid
   * @note accessing elements of an array can only be done, if it has an adress
   */
  // TODO in Tyr 0.7
  // public def apply(this : CRef[FlatSizedArray[T, Size]], index : index_t) : T
  // <: native;

  /**
   * Return the element at the given index (starting at 0).
   * @note it is the callers obligation to ensure that the index is valid
   * @note accessing elements of an array can only be done, if it has an adress
   */
  public
  def apply (this : Ref[FlatSizedArray[T, Size]], index : index_t) : T
            <: native;

  /**
   * Return the element at the given index (starting at 0).
   * @note it is the callers obligation to ensure that the index is valid
   * @note accessing elements of an array can only be done, if it has an adress
   *
   * @todo should be [S <: T](size_t, S) : S
   */
  public
  def update (this : Ref[FlatSizedArray[T, Size]], index : index_t, v : T) : T
             <: native;

  /**
   * Return an array shifted by offset elements.
   */
  public def shift (this : Ref[FlatSizedArray[T, Size]], offset : index_t)
                   : FlatArray[T]
                   = (FlatArray[T] !! this).shift(offset)

  public def iterator (this : Ref[FlatSizedArray[T, Size]])
                      = new FlatArrayIterator[T](FlatArray[T] !! this, Size)

  /** for each element do action */
  public
  def foreach (this : Ref[FlatSizedArray[T, Size]],
               x : BlockParameter[T],
               action : Block[any])
              : void {
    var i = 0U
    while(i < Size) {
      x = this(i)
      action.eval()
      ++i
    }
  }

  /** for each index and element do action */
  public
  def foreach (this : Ref[FlatSizedArray[T, Size]],
               idx : BlockParameter[size_t],
               x : BlockParameter[T],
               action : Block[any])
              : void {
    var i = 0U
    while(i < Size) {
      idx = i
      x = this(i)
      action.eval()
      ++i
    }
  }
}
