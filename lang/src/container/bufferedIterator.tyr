/**
 * A buffered iterator, i.e. an iterator that bufferes the head of another
 * iterator allowing to access it multiple times.
 *
 * @note The semantics of the public API is that of Iterator.
 *
 * @note The argument iterators are deleted when they run empty or when this is
 *       deleted.
 *
 * @author Timm Felden
 */
public
class BufferedIterator[T : Type[any]] <: Iterator[T], iterator.WithPeek[T] {

  /**
   * set to null if deleted; can be null on creation
   */
  private var it : Iterator[T];

  /**
   * The current first element.
   *
   * @inv head is valid iff hasNext()
   */
  private var head : T;

  public
  new (from : Iterator[T]) {
    if(from.hasNext()){
      it = from
      head = it.next()
    } else {
      it = null
    }
  }

  override
  def peek : T = head

  override
  def hasNext : bool = null != it

  override
  def next : T {
    var r = head
    if(it.hasNext()){
      head = it.next()
    } else {
      delete it
    }
    r
  }
}
