/**
 * Iterator over a FlatArray
 */
public class FlatArrayIterator[T : Type[any]] <: Iterator[T], final {
  private val self : FlatArray[T];
  private val size : size_t;
  private var i : size_t;

  public new (self := self : FlatArray[T], size : index_t){
    this.size = size.unpack
    i = 0U
  }

  delete;

  def next : T {
    val r = self(i)
    ++i
    r
  }

  def hasNext : bool = i < size

  /**
   * @see  super.fold
   * @note  use static calls as performance optimization
   */
  public def fold (initial : T,
                   left : BlockParameter[T], right : BlockParameter[T],
                   step : Block[T]) : T <: mem.consumed = try {
    var r = initial;
    while(FlatArrayIterator[T].hasNext(this)) {
      left = r;
      right = FlatArrayIterator[T].next(this);
      r = step.eval();
    }
    r
  } finally delete this
}
