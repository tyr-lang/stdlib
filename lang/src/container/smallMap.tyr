
/**
 * A map implementation with linear element access intended for small numbers of
 * elements.
 */
public
class SmallMap[K : Type[_], V : Type[_],
               EQ : def(K, K) : bool = MinEQR[K].equals]
      <: Map[K, V, EQ] {

  val data : ArrayBuffer[Pair[K,V]];

  public new {
    data = new ArrayBuffer[Pair[K,V]](4)
  }
  public delete {
    delete data
  }

  override def iterator = data.iterator()
  override def size = data.size()

  override
  def contains(k : K) : bool = data.exists p : Pair[K,V] do (EQ(p.left, k))

  override
  def apply(k : K) : V {
    data.foreach p : Pair[K,V] do {
      if (EQ(p.left, k))
        return p.right
    }
    return V !! 0
  }

  override
  def update(k : K, v : V) : void {
    val i = data.indexOf p : Pair[K,V] do (EQ(p.left, k))
    if (!data.isDefined(i)) {
      data += new Pair[K, V](k, v)
    } else {
      data(i).left = k
      data(i).right = v
    }
  }

  override
  def remove(k : K) : void {
    val i = data.indexOf c : Pair[K,V] do (EQ(c.left, k))
    if (data.isDefined(i)) {
      val e = data.removeLast()
      if (!data.empty())
        data(i) = e
    }
  }
}