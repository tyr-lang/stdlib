/**
 * An array-backed buffer that knows its size and can be resized.
 *
 * @author Timm Felden
 */
public class ArrayBuffer[T : Type[any]] <: Seq[T] {
  /**
   * The number of valid elements in the buffer.
   *
   * @inv length <= capacity
   */
  private var length : size_t;

  /**
   * The current length of data.
   */
  private var capacity : size_t;

  /**
   * The backing array.
   */
  private var data : FlatArray[T];

  /**
   * Create a new array buffer.
   *
   * @param size the initial capacity of the buffer.
   */
  public new (size : index_t = 8.implicit()) {
    length = 0U
    capacity = size.unpack
    data = new FlatArray[T](capacity)
  }

  /**
   * Create a new array buffer copying size values from an array view.
   */
  public new (source : ArrayView[T], size : index_t) {
    capacity = size.unpack
    data = new FlatArray[T](capacity)
    length = capacity
    mem.raw.copy(data.implicit(), source, length)
  }

  public delete {
    delete data;
  }

  public def iterator : FlatArrayIterator[T]
         = new FlatArrayIterator[T](data, length)

  /**
   * Access element without checking if it exists
   */
  public def apply(index : index_t) : T = data(index.unpack)
  /**
   * Update element without checking if it exists
   */
  public def update(index : index_t, v : T) : T = data.update(index.unpack, v)

  /**
   * Check if an index is defined
   */
  public def isDefined(index : index_t) : bool {
    0U <= index.unpack && index.unpack < length
  }

  /**
   * Set the first invalid index to index. Ensure that capacity can hold
   * index - 1 elements. Does not modify content, i.e. if new valid elements are
   * created, they have an undefined state.
   */
  public def setFirstInvalidIndex(index : index_t) : void {
    ensureCapacity(length = index.unpack - 1U)
  }

  public def size : size_t = length;

  public def view (offset : index_t = 0.implicit())
                  = ArrayView[T].from(data.shift(offset))

  public type def += (this: ArrayBuffer[T], v : T) : void
              <: operator.precedence[20], operator.rightAssociative
              := append;

  /**
   * Insert an element at the end of the buffer.
   */
  public def append(v : T) : void {
    val n = length + 1U
    if(capacity < n)
      this.grow(n)

    this.data(length) = v
    length = n
  }

  /**
   * Insert all elements at the end of the buffer.
   */
  public def appendAll(vs : Seq[T]) : void {
    val n = length + vs.size()
    if(n == length)
      return;

    if(capacity < n)
      this.grow(n)

    vs.foreach v do {
      this.data(length) = v;
      ++length
    }
  }

  public type def removeLast(this : ArrayBuffer[T]) : T = {
    var i = --length
    val r = data(i)
    this.shrink(length)
    r
  }

  public def remove (index : index_t) : void {
    var i = index.unpack
    --length
    while(i < length) {
      data.update(i, this.data(i+1U))
      ++i
    }
    this.shrink(length)
  }

  public def remove (index : index_t, n : index_t) : void {
    var i = index.unpack
    length -= n.unpack
    while(i < length) {
      data.update(i, this.data(i+n.unpack))
      ++i
    }
    this.shrink(length)
  }

  /**
   * Remove all elements that satisfy the argument preducate
   *
   * @return the number of removed elements
   */
  public def removeIf(x : BlockParameter[T], predicate : Block[bool]) : size_t {
    var read = 0U
    var write = 0U
    var removed = 0U

    while(read < length) {
      // read current
      var e = data(read)

      // eval predicate
      x = e
      val rem = predicate.eval()

      // update data
      if rem {
        ++removed
      } else {
        // copy an element if required
        if (write != read){
          data(write) = e
        }

        ++write
      }
      ++read
    }

    // shrink data
    if(0U != removed) {
      length -= removed
      this.shrink(length)
    }

    removed
  }

  public type def last(this : ArrayBuffer[T]) : T = this.data(length - 1U);


  /**
   * Ensure that at least n elements can be stored in the buffer.
   */
  public type def ensureCapacity(this: ArrayBuffer[T], n : index_t) : void {
    if(this.capacity < n.unpack)
      this.grow(n.unpack)
  }

  /**
   * Remove all elements from the container
   */
  public def clear() : void {
    length = 0U
  }

  /**
   * Resize the backing array to size() if it has unused capacity.
   */
  public def trimToSize() : void {
    if(length != capacity)
      this.resize(length)
  }

  /**
   * If capacity < after, resize to hold at least after elements.
   */
  private type def grow(this: ArrayBuffer[T], after : size_t) : void {
    var to = if(0U == capacity) 8U else capacity * 2U;
    while(to < after)
        to = to * 2U

    this.resize(to)
  }

  /**
   * If capacity/2 > after, release elements to hold at most after elements.
   *
   * @note will keep 8 elements; if releasing them as well is a good idea, the
   *       user has to call trimToSize explicitly
   */
  private type def shrink(this: ArrayBuffer[T], after : size_t) : void {
    if(capacity / 2U > after)
      this.resize(if (8U > after) 8U else after)
  }

  /**
   * Calculate a new capacity and replace data by copying all elements to a new
   * array.
   *
   * @pre length < after
   * @post if exact capacity == after
   */
  private type def resize(this: ArrayBuffer[T], after : size_t) : void {
    if(after == capacity)
      return

    var n = new FlatArray[T](after);
    var i = 0U;
    while(i < length) {
      n(i) = data(i);
      ++i
    }
    delete data
    data = n
  }

  // efficient binder overrides

  override
  def foreach (x : BlockParameter[T], action : Block[any]) : void {
    var i = 0U
    while(i < length) {
      x = data(i)
      action.eval()
      ++i
    }
  }

  override [Iterable.count]
  def count (x : BlockParameter[T], predicate : Block[bool]) : int {
    var i = 0U
    var r = 0
    while(i < length) {
      x = data(i)
      if(predicate.eval())
        ++r;
      ++i
    }
    return r;
  }

  override [Iterable.forall]
  def forall (x : BlockParameter[T], predicate : Block[bool]) : bool {
    var i = 0U
    while(i < length) {
      x = data(i)
      if(!predicate.eval())
        return false;
      ++i
    }
    return true;
  }

  override [Iterable.exists]
  def exists (x : BlockParameter[T], predicate : Block[bool]) : bool {
    var i = 0U
    while(i < length) {
      x = data(i)
      if(predicate.eval())
        return true;
      ++i
    }
    return false;
  }

  override [Iterable.fold]
  def fold (initial : T,
            left : BlockParameter[T], right : BlockParameter[T],
            step : Block[T]) : T {
    var i = 0U
    var r = initial;
    while(i < length) {
      left = r
      right = data(i)
      r = step.eval();
      ++i
    }
    r
  }
}