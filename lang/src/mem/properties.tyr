// Semi-automatic memory management properties.

/**
 * Instances of this type cannot or must not be deleted.
 *
 * @note For classes, delete remains abstract, but will not count as abstract
 *       member. That way, one will get an NPE at runtime when trying to delete
 *       an eternal object.
 *
 * @appliesTo type, class
 */
public property eternal <: reflection.TypeProperty;

/**
 * If applied to a type, the instances of that type cannot be created and exist
 *  even before evaluation of the global initializer.
 * If applied to an object field, the field is initialized before evaluation of
 *  the constructor's body.
 *
 * @appliesTo type, class if native or new is native
 * @appliesTo field if lifetime is object
 */
public property primordial <: reflection.TypeProperty, reflection.FieldProperty;

/**
 * An object returned by the function is new and it is the responsibility of the
 * caller to delete it.
 *
 * @example The result of a factory method.
 */
public property make <: reflection.FunctionProperty;

/**
 * An object passed here is eventually deleted by the callee.
 *
 * @example A Job passed to a ThreadPool
 */
public property free <: reflection.RTParameterProperty;

/**
 * An object def with this property will consume this on call. I.e. it will
 * unconditionally call delete before returning.
 *
 * @note this is a short hand for an explicit this with a free property
 *
 * @note it is an error if dispatching overloads disagree on this property
 */
public property consumed <: reflection.FunctionProperty;

/**
 * An object passed here is owned by the target, i.e. it has to be deleted when
 * the target runs out of scope iff the value is not passed to another owned
 * target or returned as make. If an owned object is passed that way, it must
 * not be used afterwards.
 *
 * @example The local state of a function; internal representation of data
 *          structures.
 */
public property owned <: reflection.RTParameterProperty;

/**
 * An object passed here may outlive the caller. In contrast to verification
 * systems, share can, in combination with other code, mean that the object is
 * freed before the termination of the caller. A safe reaction to shared
 * resource usage is a shared pointer -- acylclicity provided. A sane and
 * efficient reaction is a user-employed ownership-based policy using explicit
 * calls to delete.
 *
 * @example An object stored in a collection
 */
public property share <: reflection.RTParameterProperty;

/**
 * The pointer to an object passed here does not escape the call.
 *
 * @example The collection itself for most operations on collections (foreach,
 *          fold, map, size, add, remove, ...) but not e.g. iterator().
 */
public property peek <: reflection.RTParameterProperty;
