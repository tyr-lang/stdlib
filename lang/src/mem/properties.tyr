// Semi-automatic memory management properties.

/**
 * An object returned by the function is new and it is the responsibility of the
 * caller to delete it.
 *
 * @example The result of a factory method.
 */
property make;

/**
 * An object passed here is eventually deleted by the callee.
 *
 * @example A Job passed to a ThreadPool
 */
property free;

/**
 * An object passed here is owned by the target, i.e. it has to be deleted when
 * the target runs out of scope iff the value is not passed to another owned
 * target or returned as make. If an owned object is passed that way, it must
 * not be used afterwards.
 *
 * @example The local state of a function; internal representation of data
 *          structures.
 */
property owned;

/**
 * An object passed here may outlive the caller. In contrast to verification
 * systems, share can, in combination with other code, mean that the object is
 * freed before the termination of the caller. A safe reaction to shared
 * resource usage is a shared pointer -- acylclicity provided. A sane and
 * efficient reaction is a user employed ownership based policy using explicit
 * calls to delete.
 *
 * @example An object stored in a collection
 */
property share;

/**
 * The pointer to an object passed here does not escape the call.
 *
 * @example The collection itself for most operations on collections (foreach,
 *          fold, map, size, add, remove, ...) but not e.g. iterator().
 */
property peek;
