/**
 * This type groups helper functions for raw memory management.
 *
 * @note these functions are not intended for direct use
 *
 * @author Timm Felden
 */
private[tyr]
type raw {

  /**
   * Fill an unitialized value with heap-allocated memory of adequate size.
   *
   * @note this is essentially Cs malloc(sizeof(T)) except that the operation
   *       ensures that user code stays well-typed
   *
   * @note in future versions of Tyr, we will perevent the user from calling
   *       this function directly
   *
   * @note memory managed by Tyr is either produced by a call to this function
   *       or stack-local
   *
   * @return a pointer to the new memory
   */ 
  public type def `new`(t : Type[any]) : Null <: reflection.native;

  /**
   * Release heap-allocated memory.
   * If the argument is null, nothing will happen.
   * If the argument is a ref, it will be set to null afterwards.
   *
   * @note any result of a call to `new` shall eventually be destroyed by a call
   *       to `delete`
   */
  public type def `delete`(ref : any) : void <: reflection.native;

  /**
   * Copy size bytes from source to dest.
   *
   * @note has no defined semantics if the copied blocks overlap
   */
  public
  type def copy(dest : pointer, source : pointer, size : container.size_t)
               : void <: reflection.native;
}
