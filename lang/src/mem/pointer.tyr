/**
 * Create a pointer to an unknown C struct definition.
 * The LLVM type of the base type is an opaque type, i.e. just any unknown type.
 * This type is used to type C APIs and there is no means to derefernce it.
 *
 * While not strictly needed, in Tyr, it is used to type C APIs.
 *
 * There is no valid way to create new values from Tyr other then calling C
 * functions.
 */
public
type OpaquePointer[Name : StringLiteral]
      <: observablePointer, reflection.native;


/**
 * A C-style pointer type with the sole purpose of being used in C APIs to
 * reflect the expected behaviour. This pointer type offers arithmetic and can
 * be constructed from pointer, i.e. also Ref and CRef which is highly unsafe in
 * general and should be avoided wherever possible.
 *
 * @note  This pointer cannot take part in Tyr's autodereference system. Hence,
 *  it offers no implicit conversion.
 *
 * TODO add arithmethics with C++-style semantics that make it relative to the
 *  size of T once that size is available in the frontend. If it is really
 *  required to implement this, it could also be native and done in the backend.
 */
public
type CPointer[T : Type[_]] <: observablePointer, reflection.native {
  public new(p : pointer) {
    this = this.type !! p
  }

  public def * : T <: operator.precedence[210] = toRef()

  public def toRef : Ref[T] = Ref[T] !! this
}


/**
 * A pointer to a heap-allocated object that has itself no runtime type
 * information.
 *
 * In Tyr, this type is used for type instances that cannot be passed as Ref
 * because their usage outlives their declaration and that should not be copied.
 *
 * Further, it is used to type C APIs with structs that have Tyr equivalents.
 *
 * @note  At first glance, it might be surprising that this is called pointer
 *  instead of object. But, in fact, malloc creates new valid pointers and free
 *  ends their validity, i.e. lifetime.
 *
 * @TODO there should be a ConstantHeapPointer converting to CRef once we have it
 */
public
type HeapPointer[T : Type[any]]
      <: observablePointer, reflection.proxy[Ref[T]], reflection.native {

  /**
   * allocate an unitialized T
   */
  public new <: reflection.native;

  /**
   * allocate a T and initialize it with the argument value
   */
  public new(initial : T) <: reflection.native;

  /**
   * release the object's memory
   *
   * if T defines delete, it will be called
   *
   * @note will reset the target var to null
   */
  public delete <: reflection.native;

  // TODO it might be requiredto have a def free <: consumed bypassing T's delete
  // note to self: free should also work on values and have the semantics that they are just invalidated

  /**
   * For valid non-null pointers, this is an identity conversion.
   * Otherwise, the semantics is undefined and may vary depending on compiler
   * settings and implementations.
   */
  public def toRef : Ref[T] <: reflection.native;

  // TODO this should be native and it should have a placement realization;
  // sleipnir should realize native functions with placement realizations by translating the placement target instead
  public def implicit : Ref[T] <: inline = toRef()
}