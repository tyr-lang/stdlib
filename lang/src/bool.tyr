/**
 * The truth type
 *
 * @author Timm Felden
 */
public type bool <: reflection.native {
  public def ! : bool <: reflection.native, operator.precedence[250];

  public def != (x : bool) : bool <: reflection.native, operator.precedence[80];
  public def == (x : bool) : bool <: reflection.native, operator.precedence[80];

  public def &! (x : bool) : bool <: reflection.native, operator.precedence[70];
  public def ^! (x : bool) : bool <: reflection.native, operator.precedence[60];
  public def |! (x : bool) : bool <: reflection.native, operator.precedence[50];

  /* the standard semantics of this operator in any common language */
  public def && (x : Block[bool]) : bool
         <: operator.precedence[40], operator.rightAssociative =
    if this x.eval() else this

  /* the standard semantics of this operator in any common language */
  public def || (x : Block[bool]) : bool
         <: operator.precedence[30], operator.rightAssociative =
    if this this else x.eval()

  public type def &= (this : Ref[bool], v : bool) : bool
           <: operator.precedence[20], operator.rightAssociative {
    this = this &! v;
  }
  public type def ^= (this : Ref[bool], v : bool) : bool
           <: operator.precedence[20], operator.rightAssociative {
    this = this ^! v;
  }
  public type def |= (this : Ref[bool], v : bool) : bool
           <: operator.precedence[20], operator.rightAssociative {
    this = this |! v;
  }

  // TODO type val unknown <: reflection.native; <- an unknown bool constant required to prevent immediate CT-evaluation of some test code

  test "trivial cfg" {
    false || true
  }

  test "simple cfg" {
    (false || true) && !(!true)
  }

  test "valid cfg" {
    val t = false || true
    val f = !true

    t && !f
  }
}

public type boolLiteral <: bool, reflection.CT, reflection.noVar;