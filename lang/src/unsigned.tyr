/**
 * This is the unsigned integer type of n bits.
 *
 * @author Timm Felden
 */
public
type Unsigned[Size : IntegerLiteral[32]]
      <: reflection.canSwitchOn, reflection.native {

  /** as in C,C++,Java */
  public type def ++ (this : Ref[Unsigned[Size]]) : Unsigned[Size]
              <: reflection.native, operator.precedence[210];
  /** as in C,C++,Java */
  public type def -- (this : Ref[Unsigned[Size]]) : Unsigned[Size]
              <: reflection.native, operator.precedence[210];

  public
  def ~ : Unsigned[Size]
      <: reflection.native, reflection.CT, operator.precedence[200];

  public def * (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[120];
  public def / (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[120];
  public def % (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[120];

  public def + (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[110];
  public def - (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[110];

  public def << (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[100];
  public def >> (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[100];

  /**
   * @note in contrast to C, we do not have to assign one precedence to all
   * incarnations of an operator symbol. Hence, we fix C's historical errors.
   */
  public def & (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[97];
  /**
   * @note in contrast to C, we do not have to assign one precedence to all
   * incarnations of an operator symbol. Hence, we fix C's historical errors.
   */
  public def ^ (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[95];
  /**
   * @note in contrast to C, we do not have to assign one precedence to all
   * incarnations of an operator symbol. Hence, we fix C's historical errors.
   */
  public def | (x : Unsigned[Size]) : Unsigned[Size]
         <: reflection.native, reflection.CT, operator.precedence[93];

  public def < (x : Unsigned[Size]) : bool
        <: reflection.native, reflection.CT, operator.precedence[90];
  public def <= (x : Unsigned[Size]) : bool
        <: reflection.native, reflection.CT, operator.precedence[90];
  public def > (x : Unsigned[Size]) : bool
        <: reflection.native, reflection.CT, operator.precedence[90];
  public def >= (x : Unsigned[Size]) : bool
        <: reflection.native, reflection.CT, operator.precedence[90];

  public
  def != (x : Unsigned[Size]) : bool
         <: reflection.native, reflection.CT, operator.precedence[80];
  public
  def == (x : Unsigned[Size]) : bool
         <: reflection.native, reflection.CT, operator.precedence[80];


  // self modifying binary operators
  public
  type def *= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this * v;
  }
  public
  type def /= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this / v;
  }
  public
  type def %= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this % v;
  }

  public
  type def += (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this + v;
  }
  public
  type def -= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this - v;
  }

  public
  type def <<= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this << v;
  }
  public
  type def >>= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this >> v;
  }

  public
  type def &= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this & v;
  }
  public
  type def ^= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this ^ v;
  }
  public
  type def |= (this : Ref[Unsigned[Size]], v : Unsigned[Size]) : Unsigned[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this | v;
  }

  /**
   * Resize the argument value to the desired new size.
   * Truncate if NewSize < Size;
   * Zeroextend if NewSize > Size;
   * nop if NewSize == Size.
   */
  public
  def resize[NewSize : IntegerLiteral[32]] : Unsigned[NewSize]
      <: reflection.native, reflection.CT;

  /**
   * Transform the value to a signed integer.
   *
   * @note this is a nop
   */
  public def sign : Integer[Size] <: reflection.native, reflection.CT;

  /**
   * truncate/zero extend the value to 64 and unsign it then
   */
  public def implicit : container.index_t <: reflection.native;

  /**
   * Allow inserting the value into a StringReceiver
   *
   * @note the necessity to call this explicitly should eventually be removed
   *   with a type interface and a respective template-inference-enabled insert
   *   or conversion operator or function
   */
  public def show : _internal_.UnsignedShowOps <: inline =
    new _internal_.UnsignedShowOps(resize[64](), Size);
}

/**
 * An unsigned integer literal.
 * This type is used to allow compile-time type modifications with unsigned
 * arguments.
 * The type is part of the type theory and can serve as a type argument.
 *
 * @author Timm Felden
 */
public
type UnsignedLiteral[Size : IntegerLiteral[32]]
      <: Unsigned[Size], reflection.Literal,
         reflection.CT, reflection.noVar, final;

// common Unsigned names
public type byte := Unsigned[8];
