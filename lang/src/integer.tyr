/**
 * The general integer type. This is a signed integer type of n bits.
 *
 * @note the cyclic elaboration error for size is handled by the compiler
 *
 * @author Timm Felden
 */
public
type Integer[Size : IntegerLiteral[32]]
      <: reflection.canSwitchOn, reflection.native {

  // TODO Integer types should get inline type vals MIN_VALUE, MAX_VALUE, ZERO
  // and ONE. These should exist in Unsigned and Float too.
  // TODO There should be a check ensuring that size is at least 1.
  // Note to self: I could just add a tyr.lang.reflect.Constraint property
  // taking an expression that is CT-evaluated and will result in an error
  // message if it does not evaluate to true. (= static_assert)

  /** as in C,C++,Java */
  public type def ++ (this : Ref[Integer[Size]]) : Integer[Size]
              <: reflection.native, operator.precedence[210];
  /** as in C,C++,Java */
  public type def -- (this : Ref[Integer[Size]]) : Integer[Size]
              <: reflection.native, operator.precedence[210];

  public def - : Integer[Size] <: reflection.native, reflection.CT, operator.precedence[200];
  public def ~ : Integer[Size] <: reflection.native, reflection.CT, operator.precedence[200];

  public def * (x : Integer[Size]) : Integer[Size]
         <: reflection.native, reflection.CT, operator.precedence[120];
  public def / (x : Integer[Size]) : Integer[Size]
         <: reflection.native, reflection.CT, operator.precedence[120];
  public def % (x : Integer[Size]) : Integer[Size]
         <: reflection.native, reflection.CT, operator.precedence[120];

  public def + (x : Integer[Size]) : Integer[Size]
         <: reflection.native, reflection.CT, operator.precedence[110];
  public def - (x : Integer[Size]) : Integer[Size]
         <: reflection.native, reflection.CT, operator.precedence[110];

  public def << (x : Integer[Size]) : Integer[Size]
         <: reflection.native, reflection.CT, operator.precedence[100];
  public def >> (x : Integer[Size]) : Integer[Size]
         <: reflection.native, reflection.CT, operator.precedence[100];

  /**
   * @note in contrast to C, we do not have to assign one precedence to all
   * incarnations of an operator symbol. Hence, we fix Cs historical errors.
   */
  public
  def & (x : Integer[Size]) : Integer[Size]
        <: reflection.native, reflection.CT, operator.precedence[97];

  /**
   * @note in contrast to C, we do not have to assign one precedence to all
   * incarnations of an operator symbol. Hence, we fix Cs historical errors.
   */
  public
  def ^ (x : Integer[Size]) : Integer[Size]
        <: reflection.native, reflection.CT, operator.precedence[95];

  /**
   * @note in contrast to C, we do not have to assign one precedence to all
   * incarnations of an operator symbol. Hence, we fix Cs historical errors.
   */
  public
  def | (x : Integer[Size]) : Integer[Size]
        <: reflection.native, reflection.CT, operator.precedence[93];

  public def < (x : Integer[Size]) : bool
         <: reflection.native, reflection.CT, operator.precedence[90];
  public def <= (x : Integer[Size]) : bool
         <: reflection.native, reflection.CT, operator.precedence[90];
  public def > (x : Integer[Size]) : bool
         <: reflection.native, reflection.CT, operator.precedence[90];
  public def >= (x : Integer[Size]) : bool
         <: reflection.native, reflection.CT, operator.precedence[90];

  public def != (x : Integer[Size]) : bool
         <: reflection.native, reflection.CT, operator.precedence[80];
  public def == (x : Integer[Size]) : bool
         <: reflection.native, reflection.CT, operator.precedence[80];


  // self modifying binary operators
  public type def *= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this * v;
  }
  public type def /= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this / v;
  }
  public type def %= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this % v;
  }

  public type def += (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this + v;
  }
  public type def -= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this - v;
  }

  public type def <<= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this << v;
  }
  public type def >>= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this >> v;
  }

  public type def &= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this & v;
  }
  public type def ^= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this ^ v;
  }
  public type def |= (this : Ref[Integer[Size]], v : Integer[Size]) : Integer[Size]
           <: operator.precedence[20], operator.rightAssociative {
    this = this | v;
  }

  /**
   * Resize the argument value to the desired new size.
   * Truncate if NewSize < Size;
   * Signextend if NewSize > Size;
   * nop if NewSize == Size.
   */
  public
  def resize[NewSize : IntegerLiteral[32]] : Integer[NewSize]
      <: reflection.native, reflection.CT;

  /**
   * Transform the value to an unsigned integer.
   *
   * @note this is a nop
   */
  public def unsign : Unsigned[Size] <: reflection.native, reflection.CT;

  /**
   * Return the absolute value of this integer. Undefined for MIN_VALUE.
   */
  public def abs : Integer[Size] <: reflection.native;

  /**
   * truncate/sign extend the value to 64 and unsign it then
   */
  public def implicit : container.index_t <: reflection.native;

  /**
   * Convert the integer to a float
   */
  public
  def toFloat[NewSize : IntegerLiteral[32]] : Float[NewSize]
      <: reflection.native;

  /**
   * Allow inserting the value into a StringReceiver
   *
   * @note the necessity to call this explicitly should eventually be removed
   *   with a type interface and a respective template-inference-enabled insert
   *   or conversion operator or function
   */
  public def show : _internal_.IntegerShowOps <: inline =
    new _internal_.IntegerShowOps(resize[64](), Size);
}

/**
 * An integer literal.
 * This type is used to allow compile-time type modifications with integer
 * arguments such as the integer type itself.
 *
 * @note the cyclic elaboration error for size is handled by the compiler
 *
 * @author Timm Felden
 */
public type IntegerLiteral[Size : IntegerLiteral[32]]
      <: Integer[Size], reflection.Literal,
         reflection.CT, reflection.noVar, final {

  test "IntegerLiteral" {
    // this test is currently used to instantiate the IntegerLiteral type
    // @note this instantiation is required to solve the cyclic elaboration
    //       problem for packages != tyr.lang
    0 == 0i32
  }
}

// common Integer names
public type byte  := Integer[8];
public type short := Integer[16];
public type int   := Integer[32];
public type long  := Integer[64];

