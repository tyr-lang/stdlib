/**
 * The general integer type. This is a signed integer type of n bits.
 *
 * @author Timm Felden
 */
val type integer[size : int] <: native {

  def - : integer[size] <: native, operator.precedence[200];
  def ~ : integer[size] <: native, operator.precedence[200];

  def * (x : integer[size]) : integer[size]
        <: native, operator.precedence[120];
  def \ (x : integer[size]) : integer[size]
        <: native, operator.precedence[120];
  def % (x : integer[size]) : integer[size]
        <: native, operator.precedence[120];

  def + (x : integer[size]) : integer[size]
        <: native, operator.precedence[110];
  def - (x : integer[size]) : integer[size]
        <: native, operator.precedence[110];

  def << (x : integer[size]) : bool
        <: native, operator.precedence[100];
  def >> (x : integer[size]) : bool
        <: native, operator.precedence[100];

  def < (x : integer[size]) : bool
        <: native, operator.precedence[90];
  def <= (x : integer[size]) : bool
        <: native, operator.precedence[90];
  def > (x : integer[size]) : bool
        <: native, operator.precedence[90];
  def >= (x : integer[size]) : bool
        <: native, operator.precedence[90];

  def != (x : integer[size]) : bool <: native, operator.precedence[80];
  def == (x : integer[size]) : bool <: native, operator.precedence[80];
}

/**
 * An integer literal.
 * This type is used to allow compile-time type modifications with integer
 * arguments such as the integer type itself.
 *
 * @author Timm Felden
 */
val type integerLiteral[size : int] <: integer[size], NoVar {
  test "integerLiteral" {
    // this test is currently used to instantiate the integerLiteral type
    0 == 0i32
  }
}

// common integer names
type byte  := integer[8];
type short := integer[16];
type int   := integer[32];
type long  := integer[64];

