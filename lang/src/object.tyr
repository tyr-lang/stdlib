/**
 * Object is the top of the class latice.
 * Null is the bottom element of the class latice.
 * Object are represented by pointers.
 */
public class Object <: observablePointer, abstract {

  /**
   * The runtime class of this object
   *
   * @note this value is set by the back-end on object construction
   * @note should be Class[this.type]
   */
  val `class` : Class;

  /**
   * Same as accessing class directly or via a x.class expression.
   * This function is mainly used as an implicit conversion from object to type.
   */
  public type def getClass(this : Object) : Class <: inline = this.class;

  /**
   * Does nothing. The field class is initialized before calling the first
   * constructor.
   *
   * @note this is always implicit and typed as this.type
   *
   * @note new is always a static call
   */
  protected new <: native;

  /**
   * Release resources held by this object including its memory.
   *
   * @note memory management is detatched from new/delete to allow local
   *       overrides such as placement new or may-ownership-based automatic
   *       memory management (Rust must-ownership type system will never be
   *       added to Tyr as it is inherently broken).
   *       Also, this allows to call parent destructors explicitly in the middle
   *       of a child destructor.
   *
   * @note delete is always a dispatching call
   *
   * @note it is always an error to use a deleted object, even if its memory is
   *       not returned to the OS
   *
   * @note delete is the only dispatching function in Object and has, hence,
   *       always the ID 0
   */
  public delete;

  /**
   * Check if this is exactly of the argument type
   *
   * @note null is not of any Class type
   *
   * @todo implement CT-evaluation
   *
   * @note type checks have the same precedence as integer less
   */
  public type def =:= (this : Object, cls : Class) : bool
               <: operator.precedence[90] =
    if (null == this) false
    else cls == this.class

  /**
   * Check if this is of the argument type, i.e. assignable without conversion
   *
   * @note true for null
   */
  public type def <:= (this : Object, cls : Class) : bool
               <: operator.precedence[90] =
    if (null == this) true
    else this.class <= cls

  /**
   * Check if this is instance of a subtype of cls
   *
   * @note true for null
   */
  public type def <:< (this : Object, cls : Class) : bool
               <: operator.precedence[90] =
    if (null == this) true
    else this.class < cls
}

/**
 * The type of null. This is the bottom element of the class latice.
 */
public interface Null <: Object;
