/**
 * Object is the top of the class latice.
 * Null is the bottom element of the class latice.
 * Object are represented by pointers.
 */
class Object <: observablePointer, abstract {
  /**
   * Does nothing. The field class is initialized before calling the first
   * constructor.
   *
   * @note this is always implicit and typed as this.type
   *
   * @note new is always a static call
   */
  new <: native;

  /**
   * The runtime class of this object
   *
   * @note this value is set by the back-end on object construction
   * @note should be Class[this.type]
   */
  val `class` : Class;

  /**
   * Release resources held by this object including its memory.
   *
   * @note memory management is detatched from new/delete to allow local
   *       overrides such as placement new or may-ownership-based automatic
   *       memory management (Rust must-ownership type system will never be
   *       added to Tyr as it is inherently broken).
   *       Also, this allows to call parent destructors explicitly in the middle
   *       of a child destructor.
   *
   * @note delete is always a dispatching call
   *
   * @note it is always an error to use a deleted object, even if its memory is
   *       not returned to the OS
   */
  delete;
}

/**
 * The type of null. This is the bottom element of the class latice.
 */
interface Null <: Object;
