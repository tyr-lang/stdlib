/**
 * A collections of functions turning values into strings.
 *
 * @note Any function that does not take a StringBuffer as argument returns a
 *       fresh buffer that must be deleted by the caller.
 */
public type toString {

  /**
   * Int to decimal string.
   */
  public
  type def apply(v : int) : StringBuffer {
    if (0 == v){
      return new StringBuffer("0");
    }

    // an int can be 9 digits and a - sign
    var b = new container.FlatSizedArray[byte, 10U];
    // insert chars in reverse, start at position 9
    var p = 10U;

    var i = v
    while (i != 0) {
      val rem = i % 10
      // '0' + value
      val c = 0x30i8 + byte !! rem.abs()
      --p
      b(p) = c
      i /= 10
    }

    if(v < 0) {
      // '-'
      --p
      b(p) = 0x2di8
    }

    val from = container.ArrayView[byte].from(b.shift(p));

    return StringBuffer.wrapAndConsume(
      new container.ArrayBuffer[byte](from, 10U-p)
    );
  }

  /**
   * Print a pointer as unsigned 64 bit in the form 0x...
   */
  public
  type def apply(v : pointer) : StringBuffer {

    // "0x" + 16 digits
    val r = new container.ArrayBuffer[byte](18);

    // 0x
    r += 0x30i8
    r += 0x78i8

    var p = 16U;

    val i : Unsigned[64] = Unsigned[64] !! v
    while (p != 0U) {
      val rem = i >> --p*4U & 0xfU
      // '0' + value
      val c = (if(rem < 10U) 0x30i8 else (0x41i8 - 0xai8)) + byte !! rem
      r += c
    }

    return StringBuffer.wrapAndConsume(r)
  }
}
