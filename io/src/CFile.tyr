with mem.OpaquePointer;
with container.iterator.SingleElementIterator
with container.StringReceiver
with container.StringReceiverTarget
with container.UTF8Iterator

/**
 * The Tyr equivalent of C's FILE*
 *
 * @note C functions should be made accessible under their name
 *
 * @note Tyr-style utilitity functions should omit the f-prefix and have an
 *       inline property
 */
public type CFile <: OpaquePointer["FILE"] {
  with container.size_t;

  public type def open (path : CString, mode : CString) : CFile extern c.fopen;
  public type def open (path : String, mode : String) : CFile {
    var p = new CString(path)
    var m = new CString(mode)
    val r = open(p, m);
    delete p
    delete m
    r
  }

  /** see C's fflush */
  public def flush : int extern c.fflush;

  public type def fclose (this : CFile) : int extern c.fclose;
  public delete {
    fclose(this);
  }

  public type def remove (path : CString) : int extern c.remove;

  public type def feof (this : CFile) : int extern c.feof;
  public type def eof (this : CFile) : bool <: inline = 0 != feof(this);

  public type def fwrite (data : pointer, elementSize : size_t,
                          elementCount : size_t, stream : CFile) : size_t
                         extern c.fwrite;

  public type def fputs (data : CString, stream : CFile) : int extern c.fputs;
  public type def fputc (data : int, stream : CFile) : int extern c.fputc;

  /** see C's fputc */
  public def put (character : int) : void <: inline
                 = fputc(character, this);

  public def put (data : CString) : void <: inline
                 = fputs(data, this);

  public def put (data : SolidStringView) : void <: inline
                 = fwrite(data.data, 1U, data.size, this);

  public def receive() = new CFileReceiverProxy(this)
  public
  def :: (ref : StringReceiverTarget) <: operator.postfix = receive() + ref

  test "eof stdout" {
    // note: this cannot be the case
    !eof(System.out)
  }

  test "eof stdout extension" {
    // note: this cannot be the case
    !System.out.eof()
  }

  test "std out stream" {
    System.out :: "stuff" + """
more stuff!
"""
  }

  test "std out stream numbers" {
    System.out :: 7.show() + "\n"
  }

  test "std out stream numbers b" {
    System.out.receive() # "b" + 7.show() + "\n"
  }

  test "std out stream numbers c" {
    System.out.receive() # "c" + 64.show() + "==@\n"
  }

  test "std out stream numbers x" {
    System.out.receive() # "x" + 26.show() + "\n"
  }

  test "std out stream numbers -x" {
    System.out.receive() # "x" + -26.show() + "\n"
  }

  test "std out stream numbers long" {
    System.out :: -31337L.show() + "\n"
  }
}

class CFileReceiverProxy <: container.StringReceiver {
  private val base : CFile;
  new (base := base : CFile);

  override
  def hintBytes(size : container.index_t) : void {}

  override
  def put(c : character) : void {
    new UTF8Iterator(new SingleElementIterator[character](c)).foreach b do {
      base.put(b.resize[32]())
    }
  }

  override
  def put(str : SolidStringView) : void {
    base.put(str)
  }
}