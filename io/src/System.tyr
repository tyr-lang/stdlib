/**
 * Allows basic interaction functions with and information about the host system.
 */
public type System {
  public type val out : CFile extern c.stdout;
  public type val err : CFile extern c.stderr;
  public type val in : CFile extern c.stdin;

  /**
   * The process ID.
   *
   * @note Tyr assumes the host OS to be POSIX-compliant
   */
  public type def getPID : int extern c.getpid;
  /**
   * The parent process ID.
   *
   * @note Tyr assumes the host OS to be POSIX-compliant
   */
  public type def getParentPID : int extern c.getppid;

  /**
   * Return a time in nanoseconds.
   *
   * @note  There is no guarantee about monotonicity, timezone or actual
   *   resolution. The current semantics is that it is a quick and dirty time
   *   source. It is most certainly not correct wrt. leap whatever unit.
   *
   * @note  The result type is long to allow easy delta computations. If you
   *   want to work with time, please provide a time library with adequate
   *   functionality.
   */
  public type def nanotime : long {
    var ts : __internal__.timespec
    ts.get()
    ts.toNanotime()
  }
}
